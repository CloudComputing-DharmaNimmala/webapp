name: Packer
on:
  push:
    branches:
      - main
jobs:
  packer-build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Run Node.js project
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Configure AWS CLI Profile
        run: |
          aws configure --profile git set aws_access_key_id ${{ secrets.GIT_ACCESSKEY_ID }}
          aws configure --profile git set aws_secret_access_key ${{ secrets.GIT_SECRET_ACCESS_KEY }}
          aws configure --profile git set region us-east-1  # Replace with your desired AWS region
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_PROFILE: git
      - name: Wait for MySQL to be ready
        run: |
          until nc -z -v -w30 localhost 3306
          do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
      - name: Install project dependencies
        run: npm install
      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
      - name: Run Integration tests 
        run: npm test
      - name: build artifacts
        run: npm run build
      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.5/packer_1.8.5_linux_amd64.zip
          unzip packer_1.8.5_linux_amd64.zip
          sudo mv packer /usr/local/bin/packer
          packer --version
        shell: bash
        
      - name: packer init
        run: packer init .

      - name: build AMI
        run: packer build .  
      
      - name: Set up AWS CLI Demo
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
          aws-profile: demo

      - name: Fetch ami
        run: |
          latest_ami_id=$(aws ec2 describe-images \
                            --filters "Name=name,Values=csye6225*" \
                            --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                            --output text)
          echo "Latest AMI ID is $latest_ami_id"

          launch_template_id=$(aws ec2 describe-launch-templates --launch-template-names my-launch-template --query 'LaunchTemplates[0].LaunchTemplateId')
          echo $launch_template_id
          aws ec2 create-launch-template-version --launch-template-name my-launch-template --version-description WebVersion2 --source-version 1 --launch-template-data "ImageId=$latest_ami_id"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name my-autoscaling-group \
            --launch-template LaunchTemplateId=$launch_template_id,Version='$Latest'
      - name: Initiate Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name my-autoscaling-group
      - name: Wait for Instance Refresh to Complete
        run: |
          status="InProgress"
          while [ "$status" == "InProgress" ]; do
            sleep 60
            status=$(aws autoscaling describe-instance-refreshes \
                      --auto-scaling-group-name my-autoscaling-group \
                      --query 'InstanceRefreshes[*].Status' \
                      --output text)
          if [[ "$status" == *"InProgress"* ]]; then
              status="InProgress"
          else
              status="Completed"
          fi
          done
